{
  "scopeName": "source.solidity",
  "fileTypes": [
    "sol"
  ],
  "foldingStartMarker": "{\\s*$",
  "foldingStopMarker": "^\\s*}",
  "patterns": [
    {
      "name": "keyword.control",
      "match": "\\b(event|enum)\\s+([A-Za-z_]\\w*)\\b\n",
      "captures": {
        "2": {
          "name": "support.function"
        },
        "3": null
      }
    },
    {
      "name": "keyword.control"
    },
    {
      "match": "\\\\b(pragma|contract|interface|struct|library|function|modifier|enum|assembly)\\\\s+([A-Za-z_]\\\\w*)(?:\\\\s+is\\\\s+((?:[A-Za-z_][\\\\,\\\\s]*)*))?\\\\b\n",
      "captures": {
        "2": {
          "name": "entity.name.function"
        },
        "3": {
          "name": "entity.name.function"
        }
      }
    },
    {
      "match": "\\b(address|string\\d*|bytes\\d*|int\\d*|uint\\d*|bool|hash\\d*)(?:\\s+(?:indexed\\s+)?([A-Za-z_]\\w*)\\s*[,\\)])?\\b",
      "captures": {
        "1": {
          "name": "constant.language"
        },
        "2": {
          "name": "constant.language"
        },
        "3": {
          "name": "constant.language"
        },
        "4": {
          "name": "keyword.control"
        }
      }
    },
    {
      "name": "keyword.operator.assignment.compound",
      "match": "\\*=|(?<!\\()/=|%=|\\+=|\\-="
    },
    {
      "name": "keyword.operator.assignment.compound.bitwise",
      "match": "\\&=|\\^=|<<=|>>=|>>>=|\\|="
    },
    {
      "name": "keyword.operator.bitwise.shift",
      "match": "<<|>>>|>>"
    },
    {
      "name": "keyword.operator.comparison",
      "match": "==|!="
    },
    {
      "name": "keyword.operator.relational",
      "match": "<=|>=|<|>"
    },
    {
      "name": "keyword.operator.logical",
      "match": "\\!|&&|\\|\\|"
    },
    {
      "name": "keyword.operator.bitwise",
      "match": "\\&(?=[^&])|~|\\^|\\|(?=[^|])"
    },
    {
      "name": "constant.language.boolean",
      "match": "\\b(true|false)\\b"
    },
    {
      "match": "\\b(mapping)\\s*\\((.*)\\s+=>\\s+(.*)\\)(\\s+(?:private|public|external|inherited))?\\s+([A-Za-z_]\\w*)\\b"
    },
    {
      "name": "keyword.control",
      "match": "\\b(?:abstract|after|alias|apply|auto|case|catch|copyof|default|define|final|immutable|in|inline|let|match|mutable|null|of|override|partial|promise|reference|relocatable|sealed|sizeof|static|supports|switch|try|typedef|unchecked\\_)\\b",
      "captures": {
        "1": {
          "name": "constant.language"
        },
        "2": {
          "name": "keyword.control"
        }
      }
    },
    {
      "name": "keyword.control",
      "match": "\\b(?:wei|szabo|finney|ether|seconds|minutes|hours|days|weeks|years\\_)\\b"
    },
    {
      "name": "keyword.control",
      "match": "\\b(?:var|import|function|enum|constant|if|else|for|while|do|break|continue|throw|returns?|private|public|external|inherited|storage|delete|memory|this|suicide|let|new|is|ether|wei|finney|szabo|seconds|minutes|hours|days|weeks|years\\_)\\b",
      "captures": {
        "1": {
          "name": "constant.language"
        },
        "2": {
          "name": "keyword.control"
        }
      }
    },
    {
      "match": "\\b(?:[A-Za-z_]\\w+)(\\s+(?:private|public|external|inherited))?\\s+([A-Za-z_]\\w*)\\;"
    },
    {
      "match": "\\b(msg|block|tx)\\.([A-Za-z_]\\w*)\\b",
      "captures": {
        "1": {
          "name": "support.type"
        }
      }
    },
    {
      "match": "\\b([A-Za-z_]\\w*)\\s*\\("
    },
    {
      "match": "([\\\"\\'].*[\\\"\\'])",
      "name": "string.quoted"
    },
    {
      "match": "\\b(\\d+)\\b",
      "name": "constant.numeric"
    },
    {
      "name": "constant.numeric",
      "match": "\\b(0[xX][a-fA-F0-9]+)\\b"
    },
    {
      "name": "comment.line.solidity",
      "match": "(?<!tp:)//.*?$"
    },
    {
      "name": "comment.block.solidity",
      "begin": "/\\*",
      "end": "\\*/",
      "captures": {
        "2": {
          "name": "support.function"
        }
      }
    },
    {
      "name": "comment",
      "match": "\\/\\/.*"
    },
    {
      "name": "comment",
      "begin": "(\\/\\*)",
      "end": "(\\*\\/)"
    }
  ]
}
