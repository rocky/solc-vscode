{
  "fileTypes": [
    "sol"
  ],
  "name": "Solidity",
  "scopeName": "source.solidity",
  "foldingStartMarker": "{\\s*$",
  "foldingStopMarker": "^\\s*}",
  "patterns": [
    {
      "include": "#natspec"
    },
    {
      "include": "#comment"
    },
    {
      "include": "#operator"
    },
    {
      "include": "#control"
    },
    {
      "include": "#constant"
    },
    {
      "include": "#number"
    },
    {
      "include": "#string"
    },
    {
      "include": "#type"
    },
    {
      "include": "#global"
    },
    {
      "include": "#declaration"
    },
    {
      "include": "#function-call"
    },
    {
      "include": "#assembly"
    },
    {
      "include": "#punctuation"
    }
  ],
  "repository": {
    "natspec": {
      "patterns": [
        {
          "begin": "/\\*\\*",
          "end": "\\*/",
          "name": "comment.block.documentation.solidity",
          "patterns": [
            {
              "include": "#natspec-tags"
            }
          ]
        },
        {
          "begin": "///",
          "end": "$",
          "name": "comment.block.documentation.solidity",
          "patterns": [
            {
              "include": "#natspec-tags"
            }
          ]
        }
      ]
    },
    "natspec-tags": {
      "patterns": [
        {
          "include": "#natspec-tag-title"
        },
        {
          "include": "#natspec-tag-author"
        },
        {
          "include": "#natspec-tag-notice"
        },
        {
          "include": "#natspec-tag-dev"
        },
        {
          "include": "#natspec-tag-param"
        },
        {
          "include": "#natspec-tag-return"
        }
      ]
    },
    "natspec-tag-title": {
      "match": "(@title)\\b",
      "name": "storage.type.title.natspec"
    },
    "natspec-tag-author": {
      "match": "(@author)\\b",
      "name": "storage.type.author.natspec"
    },
    "natspec-tag-notice": {
      "match": "(@notice)\\b",
      "name": "storage.type.dev.natspec"
    },
    "natspec-tag-dev": {
      "match": "(@dev)\\b",
      "name": "storage.type.dev.solidity"
    },
    "natspec-tag-param": {
      "match": "(@param)(?:\\s+([A-Za-z_]\\w*))?\\b",
      "captures": {
        "1": {
          "name": "storage.type.param.solidity"
        },
        "2": {
          "name": "variable.other.solidity"
        }
      }
    },
    "natspec-tag-return": {
      "match": "(@return)(?:\\s+([A-Za-z_]\\w*))?\\b",
      "captures": {
        "1": {
          "name": "storage.type.return.solidity"
        },
        "2": {
          "name": "variable.other.solidity"
        }
      }
    },
    "comment": {
      "patterns": [
        {
          "include": "#comment-line"
        },
        {
          "include": "#comment-block"
        }
      ]
    },
    "comment-line": {
      "match": "(?<!tp:)//.*?$",
      "name": "comment.line.solidity"
    },
    "comment-block": {
      "begin": "/\\*",
      "end": "\\*/",
      "name": "comment.block.solidity"
    },
    "operator": {
      "patterns": [
        {
          "include": "#operator-logic"
        },
        {
          "include": "#operator-mapping"
        },
        {
          "include": "#operator-arithmetic"
        },
        {
          "include": "#operator-binary"
        },
        {
          "include": "#operator-assignment"
        }
      ]
    },
    "operator-logic": {
      "match": "(==|<(?!<)|<=|>(?!>)|>=|\\&\\&|\\|\\||\\:(?!=)|\\?)",
      "name": "keyword.operator.logic.solidity"
    },
    "operator-mapping": {
      "match": "(=>)",
      "name": "storage.type.function.arrow.solidity"
    },
    "operator-arithmetic": {
      "match": "(\\+|\\-|\\/|\\*)",
      "name": "keyword.operator.arithmetic.solidity"
    },
    "operator-binary": {
      "match": "(\\^|\\&|\\||<<|>>)",
      "name": "keyword.operator.binary.solidity"
    },
    "operator-assignment": {
      "match": "(\\:?=)",
      "name": "keyword.operator.assignment.solidity"
    },
    "control": {
      "patterns": [
        {
          "include": "#control-flow"
        },
        {
          "include": "#control-using"
        },
        {
          "include": "#control-import"
        },
        {
          "include": "#control-pragma"
        },
        {
          "include": "#control-underscore"
        },
        {
          "include": "#control-other"
        }
      ]
    },
    "control-flow": {
      "match": "\\b(if|else|for|while|do|break|continue|throw|returns?)\\b",
      "name": "keyword.control.flow.solidity"
    },
    "control-using": {
      "match": "\\b(using)\\b",
      "name": "keyword.control.using.solidity"
    },
    "control-import": {
      "match": "\\b(import)\\b",
      "name": "keyword.control.import.solidity"
    },
    "control-pragma": {
      "match": "\\b(pragma)(?:\\s+([A-Za-z_]\\w+)\\s+([^\\s]+))?\\b",
      "captures": {
        "1": {
          "name": "keyword.control.pragma.solidity"
        },
        "2": {
          "name": "entity.name.tag.pragma.solidity"
        },
        "3": {
          "name": "constant.other.pragma.solidity"
        }
      }
    },
    "control-underscore": {
      "match": "\\b(_)\\b",
      "name": "constant.other.underscore.solidity"
    },
    "control-other": {
      "match": "\\b(new|delete|emit)\\b",
      "name": "keyword.control.solidity"
    },
    "constant": {
      "patterns": [
        {
          "include": "#constant-boolean"
        },
        {
          "include": "#constant-time"
        },
        {
          "include": "#constant-currency"
        }
      ]
    },
    "constant-boolean": {
      "match": "\\b(true|false)\\b",
      "name": "constant.language.boolean.solidity"
    },
    "constant-time": {
      "match": "\\b(seconds|minutes|hours|days|weeks|years)\\b",
      "name": "constant.language.time.solidity"
    },
    "constant-currency": {
      "match": "\\b(ether|wei|finney|szabo)\\b",
      "name": "constant.language.currency.solidity"
    },
    "number": {
      "patterns": [
        {
          "include": "#number-decimal"
        },
        {
          "include": "#number-hex"
        }
      ]
    },
    "number-decimal": {
      "match": "\\b(\\d+(\\.\\d+)?)\\b",
      "name": "constant.numeric.decimal.solidity"
    },
    "number-hex": {
      "match": "\\b(0[xX][a-fA-F0-9]+)\\b",
      "name": "constant.numeric.hexadecimal.solidity"
    },
    "string": {
      "patterns": [
        {
          "match": "\\\".*?\\\"",
          "name": "string.quoted.double.solidity"
        },
        {
          "match": "\\'.*?\\'",
          "name": "string.quoted.single.solidity"
        }
      ]
    },
    "type": {
      "patterns": [
        {
          "include": "#type-primitive"
        }
      ]
    },
    "type-primitive": {
      "match": "\\b(address|string\\d*|bytes\\d*|int\\d*|uint\\d*|bool|hash\\d*)\\s+(?:(indexed)\\s*)?([A-Za-z_]\\w*)\\s*[,; \\)\\t\\r\\n)]",
      "captures": {
        "1": {
          "name": "constant.language.solidity"
        },
        "2": {
          "name": "constant.language.solidity"
        },
        "3": {
          "name": "variable.other.solidity"
        }
      }
    },
    "global": {
      "patterns": [
        {
          "include": "#global-variables"
        },
        {
          "include": "#global-functions"
        }
      ]
    },
    "global-variables": {
      "patterns": [
        {
          "match": "\\b(msg|block|tx|now)\\b",
          "name": "variable.language.transaction.solidity"
        },
        {
          "match": "\\b(this)\\b",
          "name": "variable.language.this.solidity"
        },
        {
          "match": "\\b(super)\\b",
          "name": "variable.language.super.solidity"
        }
      ]
    },
    "global-functions": {
      "patterns": [
        {
          "match": "\\b(require|assert|revert)\\b",
          "name": "keyword.control.exceptions.solidity"
        },
        {
          "match": "\\b(selfdestruct|suicide)\\b",
          "name": "keyword.control.contract.solidity"
        },
        {
          "match": "\\b(addmod|mulmod|keccak256|sha256|sha3|ripemd160|ecrecover)\\b",
          "name": "support.function.math.solidity"
        },
        {
          "match": "\\b(blockhash|gasleft)\\b",
          "name": "variable.language.transaction.solidity"
        }
      ]
    },
    "declaration": {
      "patterns": [
        {
          "include": "#declaration-contract"
        },
        {
          "include": "#declaration-interface"
        },
        {
          "include": "#declaration-library"
        },
        {
          "include": "#declaration-struct"
        },
        {
          "include": "#declaration-event"
        },
        {
          "include": "#declaration-enum"
        },
        {
          "include": "#declaration-function"
        },
        {
          "include": "#declaration-constructor"
        },
        {
          "include": "#declaration-modifier"
        },
        {
          "include": "#declaration-mapping"
        }
      ]
    },
    "declaration-contract": {
      "patterns": [
        {
          "match": "\\b(contract)(?:\\s+([A-Za-z_]\\w*))?\\b",
          "captures": {
            "1": {
              "name": "storage.type.contract.solidity"
            },
            "2": {
              "name": "entity.name.type.contract.solidity"
            }
          }
        },
        {
          "match": "\\b(is)\\b",
          "name": "storage.modifier.is.solidity"
        }
      ]
    },
    "declaration-interface": {
      "match": "\\b(interface)(?:\\s+([A-Za-z_]\\w*))?\\b",
      "captures": {
        "1": {
          "name": "storage.type.interface.solidity"
        },
        "2": {
          "name": "entity.name.type.interface.solidity"
        }
      }
    },
    "declaration-library": {
      "match": "\\b(library)(?:\\s+([A-Za-z_]\\w*))?\\b",
      "captures": {
        "1": {
          "name": "storage.type.library.solidity"
        },
        "2": {
          "name": "entity.name.type.library.solidity"
        }
      }
    },
    "declaration-struct": {
      "match": "\\b(struct)(?:\\s+([A-Za-z_]\\w*))?\\b",
      "captures": {
        "1": {
          "name": "storage.type.struct.solidity"
        },
        "2": {
          "name": "entity.name.type.struct.solidity"
        }
      }
    },
    "declaration-event": {
      "match": "\\b(event)(?:\\s+([A-Za-z_]\\w*))?\\b",
      "captures": {
        "1": {
          "name": "keyword.control.solidity"
        },
        "2": {
          "name": "entity.name.type.event.solidity"
        }
      }
    },
    "declaration-constructor": {
      "match": "\\b(constructor)\\b",
      "name": "storage.type.constructor.solidity"
    },
    "declaration-enum": {
      "match": "\\b(enum)(?:\\s+([A-Za-z_]\\w*))?\\b",
      "captures": {
        "1": {
          "name": "storage.type.enum.solidity"
        },
        "2": {
          "name": "entity.name.type.enum.solidity"
        }
      }
    },
    "declaration-function": {
      "patterns": [
        {
          "match": "\\b(function)\\s+([A-Za-z_]\\w*)\\b",
          "captures": {
            "1": {
              "name": "storage.type.function.solidity"
            },
            "2": {
              "name": "entity.name.function.solidity"
            }
          }
        },
        {
          "match": "\\b(private|public|internal|external|constant|pure|view|payable|nonpayable|inherited|indexed|storage|memory)\\b",
          "name": "storage.type.mofifier.solidity"
        }
      ]
    },
    "declaration-modifier": {
      "match": "\\b(modifier)(?:\\s+([A-Za-z_]\\w*))?\\b",
      "captures": {
        "1": {
          "name": "storage.type.modifier.solidity"
        },
        "2": {
          "name": "entity.name.function.solidity"
        }
      }
    },
    "declaration-mapping": {
      "match": "\\b(mapping)\\s*\\(([A-Za-z_]\\w*)\\s*(=>)\\s*([A-Za-z_]\\w*)\\s*\\)(?:\\s+(private|public|external|inherited))?\\s+([A-Za-z_]\\w*)\\b",
      "captures": {
        "1": {
          "name": "keyword.control.solidity"
        },
        "2": {
          "name": "support.type.solidity"
        },
        "3": {
          "name": "storage.type.function.arrow.solidity"
        },
        "4": {
          "name'": "support.type.solidity"
        },
        "5": {
          "name'": "keyword.control.solidity"
        },
        "6": {
          "name": "variable.other.solidity"
        }
      }
    },
    "function-call": {
      "match": "\\b([A-Za-z_]\\w*)\\s*\\(",
      "name": "entity.name.function.solidity"
    },
    "assembly": {
      "patterns": [
        {
          "match": "\\b(assembly)\\b",
          "name": "keyword.control.assembly.solidity"
        },
        {
          "match": "\\b(let)\\b",
          "name": "storage.type.assembly.solidity"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "match": ";",
          "name": "punctuation.terminator.statement.solidity"
        },
        {
          "match": "\\.",
          "name": "punctuation.accessor.solidity"
        },
        {
          "match": ",",
          "name": "punctuation.separator.solidity"
        }
      ]
    }
  }
}
