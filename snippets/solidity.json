{
    ".source.solidity": {
	"pragma solidity": {
	    "prefix": "pragma",
	    "body": "pragma solidity ${1:version};"
	},
	"import contract": {
	    "prefix": "import",
	    "body": "import '${1:contract}';"
	},
	"contract declaration": {
	    "prefix": "contract",
	    "body": "contract ${1:Name} {\n\t$0\n}"
	},
	"library declaration": {
	    "prefix": "library",
	    "body": "library ${1:Name} {\n\t$0\n}"
	},
	"interface declaration": {
	    "prefix": "interface",
	    "body": "interface ${1:Name} {\n\t$0\n}"
	},
	"enum declaration": {
	    "prefix": "enum",
	    "body": "enum ${1:Name} {${2:item1}, ${3:item2} }"
	},
	"mapping declaration": {
	    "prefix": "mapping",
	    "body": "mapping (${1:type1} => ${2:type2}) ${3:name};"
	},
	"function declaration": {
	    "prefix": "fun",
	    "body": "function ${1:name}(${2:type} ${3:name}) ${4|external,public,internal,private|} ${5|pure,view,payable|} {\n\t$0\n}"
	},
	"function return declaration": {
	    "prefix": "funcr",
	    "body": "function ${1:name}(${2:type} ${3:name}) ${4|external,public,internal,private|} ${5|pure,view,payable|} returns (${6:type} ${7:name}) {\n\t$0\n}"
	},
        "event declaration": {
	    "prefix": "event",
	    "body": "event ${1:name}(${2:type} ${3:name} $0);"
	},
	"modifier declaration": {
	    "prefix": "modifier",
	    "body": "modifier ${1:name}($2) {\n\t$0_\n}"
	},
	"if statement": {
	    "prefix": "if",
	    "body": "if (${1:condition}) {\n\t$2\n}"
	},
	"else statement": {
	    "prefix": "else",
	    "body": "else {\n\t$0\n}"
	},
	"for statement": {
	    "prefix": "for",
	    "body": "for (uint ${1:index} = 0; $1 < ${2:array}.length; $1${3:++}) {\n\t$0\n}"
	}
	"while statement": {
	    "prefix": "while",
	    "body": "while (boolean ${1:condition}) {\n\t$0\n}"
	}
    }
}
